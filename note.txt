# this for nginx call to check if the user is authenticated
from django.http import HttpResponse
from django.contrib.auth.decorators import login_required

@login_required
def validate_session(request):
    # If decorator doesn't redirect, session is valid
    return HttpResponse(status=200)


#### NGINX ####

sudo apt update
sudo apt install nginx
sudo ufw allow 'Nginx HTTPS'
# uncomment config from /etc/nginx/nginx.conf to avoid problem of nginx seeing several server names
server_names_hash_bucket_size 64;
# also in /etc/nginx/nginx.conf set user to computer user
user creditizens; # instead of www-data
# create the config file with domain name and create the simlink
sudo ln -s /etc/nginx/sites-available/creditizens.local /etc/nginx/sites-enabled/
# Disable nginx until you finish writing app, enable it once all is done to enable ssl redirects and reverse proxy
sudo nginx disable
# you will get an error because proxy_params have already all the lines starting with proxy_set_header. so do not do like here put one line only with the proxy_params line or the proxy_set_header lines only
location / {
        proxy_pass http://creditizens.local;
        include proxy_params;  # This includes standard proxy parameters already so no need of the next x4 proxy_set_header
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # proxy_redirect off; # if having issues with redirects from django to streamlit app use this so nginx default header altering won't be used but the django's ones
    }

# control the file size being uploaded by setting a max size value:
client_max_body_size 2000M;  # this for 2 GB for example

#### GUNICORN ####
pip install gunicorn and need to create the right folders and set permission so owner to the comptuer user and not root
# create a config file: nano gunicorn.py
  GNU nano 6.2                                                                         gunicorn.py                                                                                   
#!/usr/bin/python3

import multiprocessing

"""Gunicorn *development* config file"""

# Django WSGI application path in pattern MODULE_NAME:VARIABLE_NAME
wsgi_app = "pdf_llm_app.wsgi:application"
# The number of worker processes for handling requests
workers = multiprocessing.cpu_count() * 2 + 1
# The granularity of Error log outputs
loglevel = "debug"
# The socket to bind
bind = "0.0.0.0:8000"
# Restart workers when code changes (development only!)
reload = True
# Write access and error info to /var/log
accesslog = errorlog = "/var/log/gunicorn/gunicorn.log"
# Redirect stdout/stderr to log file
capture_output = True
# PID file so you can easily fetch process ID
pidfile = "/var/run/gunicorn/gunicorn.pid"
# Daemonize the Gunicorn process (detach & enter background)
daemon = True


# create the directories for gunicorn files
sudo mkdir -pv /var/{log,run}/gunicorn/


#### Get 3D representation of PGVector Collections Embeddings data points ####
# Extract Data from PostgreSQL
import pandas as pd
import sqlalchemy

# Establish a connection to your PostgreSQL database
engine = sqlalchemy.create_engine('postgresql://username:password@host:port/database')

# Query to fetch data from your tables
query = """
SELECT collections.name, embeddings.x, embeddings.y, embeddings.z
FROM embeddings
JOIN collections ON embeddings.collection_id = collections.id
"""

# Load the query results into a Pandas DataFrame
df = pd.read_sql_query(query, engine)

# 3D visualization using matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Create a 3D plot
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# Scatter plot using the embedding coordinates
ax.scatter(df['x'], df['y'], df['z'])

# Labeling the axes
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

# Optional: To label each point with the name of its collection
for i, txt in enumerate(df['name']):
    ax.text(df['x'][i], df['y'][i], df['z'][i], txt, size=5)

plt.show()

#### STREAMLIT ####
# database connection
# create a file .streamlit/secrets.toml with database secrets then connect to db and query db a bit like in flask app with cursors:
import streamlit as st
conn = st.connection("pdf_embedded_db", type="sql") # Initialize connection.
df = conn.query('SELECT * FROM mytable;', ttl="10m") # Perform query ttl is to have expiry for cached db result otherwise streamlit cache it forever, disable cache with ttl=0

# can also create a .streamlit/config.toml file to ut there all configs about theme, server port, telemetry opt-in/out...etc
run : streamlit config show  # to see configs. IMPORTANT FOR PRODUCTION SO SEE VALUES AND ADD THE ONES THAT YOU FIND INTERESTING TO SET

## eg. of /.streamlit/secrets.toml:
[connections.pdf_embedded_db]  # use in your code this name to initialize db conn = st.connection("pdf_embedded_db", type="sql")
    type="sql"
    dialect="postgresql"
    username="username"
    password="password"
    host="localhsot" # IP or URL
    port=5432 # Port number
    database="db" # Database name


## eg. of /.streamlit/config.toml:
# set server port
[server]
port = 8501
# file upload size
# maxUploadSize = 200 # increase size if need to add bigger files 1000 = 1GB but change also nginx file upload limit size
# if want to bind server to a specific address where it listen to for client queries
# address =
# root where the streamlit app should be served from (no root directory will work so use user directories specially in Dockerfile working directory)
# baseUrlPath = ""

[browser]
# opt-out of telemetry
gatherUsageStats = false
# serverAddress = "localhost"
# serverPort = 8501 # but will defaut to server.port value

[theme]
# base =
# primaryColor =
# backgroundColor =
# secondaryBackgroundColor =
# textColor =
# font =

[logger]
# Level of logging: 'error', 'warning', 'info', or 'debug'.'
# level = "info"

## add pages to the streamlit app by creating a folder called 'pages' and putting inside .py files, each file name will be displayed as a linked text to enter the logic of the .py file representing that file. So the naming of the files are important the UI render of those, it has to be representative of what the page does UX?UI don't forget!.

# at the root directory of the streamlit app create a directory called 'static/' in order to host the app specific static files (.png, .jpg...etc...) static files not the user ones, this is the ones of your app that decorated the webui...


#### GUNICORN ####
# make the directory that host the gunicor.sock file that will be created automatically and make those folders writable
sudo mkdir -p /opt/creditizens-local/run/

# start server
gunicorn --workers 3 --bind unix:/opt/creditizens-local/run/gunicorn.sock pdf_llm.wsgi:application # fron chatgpt good!
gunicorn --env DJANGO_SETTINGS_MODULE={{ DJANGO_SETTINGS_MODULE }} webApp.wsgi -b :{{ DJANGO_LISTENING_PORT }}&" # from ansible past project (I prefer this one)
# but we have set a gunicorn.py file with all configs so we just run this file like that (need to find where is the gunicorn binary, mine in virtual env):
sudo /home/creditizens/pdf_llm_app/django_pdf_llm_venv/bin/gunicorn -c gunicorn.py pdf_llm.wsgi:application
# no need sudo as we have put permission of gunicorn folders and files to the computer user creditizens and we use full path so no issues ;)
/home/creditizens/pdf_llm_app/django_pdf_llm_venv/bin/gunicorn -c /home/creditizens//pdf_llm_app/pdf_llm/gunicorn.py pdf_llm.wsgi:application



### DJANGO REDIRECT USER AFTER AUTHENTICATION TO STREAMLIT APP ####

from django.shortcuts import redirect
from django.contrib.auth import authenticate, login

def my_login_view(request):
    # This is a simplified example; you'll typically get these from the request.POST
    username = 'user'
    password = 'pass'

    user = authenticate(request, username=username, password=password)
    if user is not None:
        login(request, user)
        # Redirect to the Streamlit app after successful login
        return redirect('/streamlit')
    else:
        # Return an 'invalid login' error message
        return ...

#### PGVECTOR DJANGO ####
# check this to have some examples in how to enable the extension in django and also how to use the field in models.py:
https://pypi.org/project/pgvector/


#### LANGCHAIN GROQ #####
pip install langchain-groq
# initialize groq
from langchain_groq import ChatGroq

llm = ChatGroq(temperature=0, groq_api_key="YOUR_API_KEY", model_name="mixtral-8x7b-32768")

#### STREAMLIT ERRORS ####
## streamlit documentation error : got error and found solution here: https://github.com/langchain-ai/langchain/issues/10618
In the documentation they are using llm(input_text) in a function when the solution here is to use 'llm.predict' to call the llm with the input_text

## Error of having files uploaded not being read and returning None in the code
You need to use file uploaded outside of the st.form and then it is going to work

## Don't call st.write after having  defined it in variable st.subheader otherwise you will get an error:
StreamlitAPIException: _repr_html_() is not a valid Streamlit command.



#### STREAMLIT OBJECT FIELD FOR FILE UPLOAD ####
# .pdf file:
UploadedFile(
  file_id='e18e8bcf-bd3b-46bd-942b-290866c647ec',
  name='cryotherapy_paper.pdf',
  type='application/pdf',
  size=1064483,
  _file_urls=file_id: "e18e8bcf-bd3b-46bd-942b-290866c647ec" upload_url: "/_stcore/upload_file/20596ea6-5768-48d0-86a8-83195925f359/e18e8bcf-bd3b-46bd-942b-290866c647ec" delete_url: "/_stcore/upload_file/20596ea6-5768-48d0-86a8-83195925f359/e18e8bcf-bd3b-46bd-942b-290866c647ec"
)

# .txt file:
UploadedFile(
  file_id='f96815e5-e049-4d93-9370-d61f19ad2a36',
  name='article.txt',
  type='text/plain',
  size=3539,
  _file_urls=file_id: "f96815e5-e049-4d93-9370-d61f19ad2a36" upload_url: "/_stcore/upload_file/ab15c7d8-74fe-4d0c-a473-4e8c1a56e00a/f96815e5-e049-4d93-9370-d61f19ad2a36" delete_url: "/_stcore/upload_file/ab15c7d8-74fe-4d0c-a473-4e8c1a56e00a/f96815e5-e049-4d93-9370-d61f19ad2a36"
)

# get head of document displayed to have an overview of the document
# st.subheader('Raw data')
# st.write(data)

#### GIT
# to have empty folder committed
add a .gitkeep file in every folder




