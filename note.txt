# this for nginx call to check if the user is authenticated
from django.http import HttpResponse
from django.contrib.auth.decorators import login_required

@login_required
def validate_session(request):
    # If decorator doesn't redirect, session is valid
    return HttpResponse(status=200)


#### NGINX

sudo apt update
sudo apt install nginx
sudo ufw allow 'Nginx HTTPS'
# uncomment config from /etc/nginx/nginx.conf to avoid problem of nginx seeing several server names
server_names_hash_bucket_size 64;
# create the config file with domain name and create the simlink
sudo ln -s /etc/nginx/sites-available/creditizens.local /etc/nginx/sites-enabled/
# Disable nginx until you finish writing app, enable it once all is done to enable ssl redirects and reverse proxy
sudo nginx disable


#### GUNICORN
pip install gunicorn
# create a config file: nano gunicorn.py
  GNU nano 6.2                                                                         gunicorn.py                                                                                   
#!/usr/bin/python3

import multiprocessing

"""Gunicorn *development* config file"""

# Django WSGI application path in pattern MODULE_NAME:VARIABLE_NAME
wsgi_app = "pdf_llm_app.wsgi:application"
# The number of worker processes for handling requests
workers = multiprocessing.cpu_count() * 2 + 1
# The granularity of Error log outputs
loglevel = "debug"
# The socket to bind
bind = "0.0.0.0:8000"
# Restart workers when code changes (development only!)
reload = True
# Write access and error info to /var/log
accesslog = errorlog = "/var/log/gunicorn/gunicorn.log"
# Redirect stdout/stderr to log file
capture_output = True
# PID file so you can easily fetch process ID
pidfile = "/var/run/gunicorn/gunicorn.pid"
# Daemonize the Gunicorn process (detach & enter background)
daemon = True


# create the directories for gunicorn files
sudo mkdir -pv /var/{log,run}/gunicorn/

